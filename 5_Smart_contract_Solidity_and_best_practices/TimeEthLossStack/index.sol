/* 
Time constraints / Ether lost / Stack size limit
VulnÃ©rabilitÃ©s dans les smart contracts
Contraintes de temps - time constraints
Il arrive parfois que les smart contracts utilisent le timestamp du bloc, qui donne la date et lâ€™heure du bloc actuel, pour vÃ©rifier une contrainte de temps, voire comme source d'alÃ©a. Sachez que le timestamp du bloc peut Ãªtre manipulÃ© par le mineur et que toutes les utilisations directes et indirectes du timestamp doivent Ãªtre envisagÃ©es. Vous pouvez trouver plus de dÃ©tails et quelques recommandations sous la section dÃ©diÃ©e (Timestamp Dependence).

 
Ether perdu lors du transfer - Ether lost in transfer
Lors de l'envoi de lâ€™Ethers, il faut spÃ©cifier l'adresse du destinataire. Cependant, la plupart des adresses sont orphelines, c'est-Ã -dire qu'elles ne sont associÃ©es Ã  aucun utilisateur ou contrat. Si un Ether est envoyÃ© Ã  une adresse orpheline, il est perdu Ã  jamais. Notez qu'il n'y a pas de moyen direct de dÃ©tecter si une adresse est orpheline. Comme l'Ether perdu ne peut Ãªtre rÃ©cupÃ©rÃ©, vous devez vous assurer manuellement de l'exactitude des adresses des destinataires.

De mÃªme il peut arriver que des fonds soient envoyÃ©s Ã  address(0), câ€™est Ã  dire 0x00000..00. Les fonds envoyÃ©s seront alors perdus, comme vous pouvez le constater ici. Il est recommandÃ© que l'interface ou le contrat (mais cela a un coÃ»t supplÃ©mentaire en gas) vÃ©rifie que lâ€™adresse du destinataire est non-nulle.

 

Limite de la taille de la pile - Stack size limit
Chaque fois qu'un contrat invoque un autre contrat (ou mÃªme lui-mÃªme via this.f()), la pile d'appels associÃ©e Ã  la transaction augmente d'une trame (pour une explication sur la pile dâ€™appel, revoir le cours sur la pile lors de lâ€™exÃ©cution dâ€™un script Bitcoin). La pile d'appels est limitÃ©e Ã  1024 trames : lorsque cette limite est atteinte, une autre invocation lÃ¨ve une exception.

 

ğŸ”” Jusqu'au 18 octobre 2016, il Ã©tait possible d'exploiter ce fait pour mener une attaque comme suit: 

Un adversaire commence par gÃ©nÃ©rer une pile d'appels presque pleine (via une sÃ©quence d'appels imbriquÃ©s), 
Il invoque la fonction de la victime, qui Ã©chouera Ã  une nouvelle invocation. 
ğŸ’¡ Si l'exception n'est pas correctement gÃ©rÃ©e par le contrat de la victime, l'adversaire pourrait rÃ©ussir son attaque.
 */