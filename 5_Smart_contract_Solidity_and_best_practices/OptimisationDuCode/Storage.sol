/* 
  Stockage de donnÃ©es dans les Ã©vÃ©nements
Les donnÃ©es qui n'ont pas besoin d'Ãªtre accessibles sur la Blockchain peuvent Ãªtre stockÃ©es dans les Ã©vÃ©nements pour Ã©conomiser du gas.

Bien que cette technique puisse fonctionner, elle n'est pas recommandÃ©e - les Ã©vÃ©nements ne sont pas destinÃ©s au stockage de donnÃ©es. Si les donnÃ©es dont nous avons besoin sont stockÃ©es dans un Ã©vÃ©nement Ã©mis il y a longtemps, leur rÃ©cupÃ©ration peut prendre du temps en raison du nombre de blocs Ã  rechercher.
 

storage vs memory
Il existe deux possibilitÃ©s pour stocker des variables dans Solidity, Ã  savoir storage (stockage) et memory (mÃ©moire): 

Les variables Â« storage Â» sont stockÃ©es dÃ©finitivement dans la blockchain
Les variables Â« memory Â» sont temporaires et effacÃ©es entre les appels externes de fonction. 
ğŸ‘‰ Un moyen courant de rÃ©duire le nombre d'opÃ©rations de stockage consiste Ã  manipuler une variable de mÃ©moire locale avant de l'affecter Ã  une variable de stockage.

Exemple :
 */

uint256 return = 5; // assume 2 decimal places
uint256 totalReturn;

function updateTotalReturn(uint256 timesteps) external {
  uint256 r = totalReturn || 1;
  for (uint256 i = 0; i < timesteps; i++) {
    r = r * return;
  }
  totalReturn = r;
}