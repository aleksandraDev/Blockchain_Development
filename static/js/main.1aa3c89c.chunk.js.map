{"version":3,"sources":["components/AdminPanel.tsx","utils/getWeb3.ts","components/AppHeader.tsx","components/RegisterVoters.tsx","components/PhaseLogs.tsx","components/Title.tsx","App.tsx","components/RegisterProposal.tsx","components/Voting.tsx","components/Winner.tsx","serviceWorker.js","index.tsx"],"names":["WorkflowStatus","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","console","log","web3","Web3","enable","provider","providers","HttpProvider","setAccountChangeListener","setter","request","method","then","accounts","catch","err","on","AppHeader","address","Segment","clearing","Header","as","floated","RegisterVoters","onVoterSubmit","useState","value","setValue","Form","style","display","alignItems","width","justifyContent","Field","type","placeholder","onChange","target","Label","basic","color","pointing","Button","primary","onClick","PhaseLogs","voters","proposals","Container","length","textAlign","map","voter","proposal","id","name","votes","STATUS","Title","phase","Step","Group","ordered","size","label","index","completed","active","disabled","Content","AdminPanel","onChangePhase","onTallingVotes","onGetWinner","status","Grid","Column","verticalAlign","icon","content","VotingSessionEnded","secondary","VotesTallied","RegisterProposal","onSubmitProposal","Voting","onVote","Table","singleLine","Row","HeaderCell","Body","p","Cell","circular","imgStyles","flexDirection","height","padding","Winner","Card","Image","src","wrapped","Description","extra","Icon","App","contract","owner","events","selectedAccount","state","setState","RegisteringVoters","workflowStatus","setWorkflowStatus","setVoters","setProposals","winner","setWinner","useEffect","init","VotingContract","eth","getAccounts","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","allEvents","fromBlock","error","event","Error","handleEvents","handleChangeAccount","alert","account","prevState","toLowerCase","returnValues","newOwner","Number","newStatus","newVoter","voterAddress","proposalId","prevProposals","handleChangeStatus","methods","changeStatus","send","from","handleVoterSubmit","registerVoter","handleProposalSubmit","addProposal","response","ProposalRegistered","newProposal","handleVote","vote","handleTallingVotes","tallingVotes","handleGetWinner","getWinner","className","columns","relaxed","stackable","ProposalsRegistrationStarted","VotingSessionStarted","loadPhaseComponents","Divider","vertical","Loader","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1aa3c89c.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\n\nenum WorkflowStatus {\n  RegisteringVoters,\n  ProposalsRegistrationStarted,\n  ProposalsRegistrationEnded,\n  VotingSessionStarted,\n  VotingSessionEnded,\n  VotesTallied\n}\n\ninterface Props {\n  onChangePhase: () => void;\n  onTallingVotes: () => void;\n  onGetWinner: () => void;\n  status: WorkflowStatus;\n}\n\nconst AdminPanel = ({ onChangePhase, onTallingVotes, onGetWinner, status }: Props) => {\n  return (\n    <Grid.Column verticalAlign='top'>\n      <Header as='h3'>Admin Panel</Header>\n      <div style={{ display: 'flex' }}>\n        <Button primary icon='play' size='small' content='Change status' onClick={onChangePhase} />\n        {status === WorkflowStatus.VotingSessionEnded && (\n          <Button secondary icon='calculator' size='small' content='Count votes' onClick={onTallingVotes} />\n        )}\n        {status === WorkflowStatus.VotesTallied && (\n          <Button color='teal' icon='calculator' size='small' content='Show winner' onClick={onGetWinner} />\n        )}\n      </div>\n    </Grid.Column>\n  );\n};\n\nexport default AdminPanel;\n","import Web3 from 'web3';\n\ndeclare const window: Window &\n  typeof globalThis & {\n    ethereum: any;\n    web3: any;\n  };\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n      //'Modern dapp browsers...';\n      if (window.ethereum) {\n        console.log('modern dapp browsers');\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log('Injected web3 detected.');\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n\nexport const setAccountChangeListener = async (setter) => {\n  const provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider\n      .request({ method: 'eth_requestAccounts' })\n      .then((accounts) => {\n        setter(accounts[0]);\n        console.log(`Selected account is ${accounts[0]}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n\n    window.ethereum.on('accountsChanged', function (accounts) {\n      setter(accounts[0]);\n      console.log(`Selected account changed to ${accounts[0]}`);\n    });\n  }\n};\n","import React from 'react';\nimport { Header, Segment } from 'semantic-ui-react';\n\ninterface Props {\n  address: string;\n}\n\nconst AppHeader: React.FC<Props> = ({ address }) => (\n  <Segment clearing>\n    <Header as='h1' floated='left'>\n      Voting System\n    </Header>\n    <Header as='h3' floated='right'>\n      {`Connected address: ${address}`}\n    </Header>\n  </Segment>\n);\nexport default AppHeader;\n","import React, { useState } from 'react';\nimport { Button, Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  onVoterSubmit: (voter: string) => void;\n}\n\nexport const RegisterVoters = ({ onVoterSubmit }: Props) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = ({ target: { value } }) => setValue(value);\n  const handleSubmit = () => {\n    onVoterSubmit(value);\n    setValue('');\n  };\n\n  return (\n    <Form style={{ display: 'flex', alignItems: 'flex-start', width: '400px', justifyContent: 'space-between' }}>\n      <Form.Field>\n        <input type='text' placeholder='Voter address' value={value} onChange={handleChange} />\n        {!value && (\n          <Label basic color='red' pointing>\n            Please enter a voter address\n          </Label>\n        )}\n      </Form.Field>\n\n      <Button primary onClick={handleSubmit}>\n        Register voter\n      </Button>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { Container, Segment } from 'semantic-ui-react';\n\ninterface Proposal {\n  name: string;\n  votes: number;\n  id: number;\n}\n\ninterface Props {\n  voters: string[];\n  proposals: Proposal[];\n}\n\nexport const PhaseLogs = ({ voters, proposals }: Props) => {\n  return (\n    <Container>\n      {voters.length > 0 && (\n        <Segment color='teal' style={{ textAlign: 'left' }}>\n          <b>Voters</b>\n          <ol>\n            {voters.map((voter) => (\n              <li key={voter}>{voter}</li>\n            ))}\n          </ol>\n        </Segment>\n      )}\n      {proposals.length > 0 && (\n        <Segment color='violet' style={{ textAlign: 'left' }}>\n          <b>Proposals</b>\n          <ol>\n            {proposals.map((proposal) => (\n              <li key={proposal.id}>\n                Registrated proposal <b>{proposal.id}</b> under the name <b>{proposal.name}</b> has{' '}\n                <span>{proposal.votes}</span> votes\n              </li>\n            ))}\n          </ol>\n        </Segment>\n      )}\n    </Container>\n  );\n};\n","import React from 'react';\nimport { Step } from 'semantic-ui-react';\n\ninterface Props {\n  phase: number;\n}\n\nconst STATUS = [\n  'Registering Voters',\n  'Proposals Registration Started',\n  'Proposals Registration Ended',\n  'Voting Session Started',\n  'Voting Session Ended',\n  'Votes Tallied'\n];\n\nconst Title = ({ phase }: Props) => (\n  <Step.Group ordered size='mini'>\n    {STATUS.map((label, index) => (\n      <Step completed={index < phase} active={phase === index} disabled={phase < index} key={label}>\n        <Step.Content>\n          <Step.Title>{label}</Step.Title>\n        </Step.Content>\n      </Step>\n    ))}\n  </Step.Group>\n);\nexport default Title;\n","import React, { useState, useEffect } from 'react';\nimport VotingContract from './contracts/VotingA.json';\nimport getWeb3, { setAccountChangeListener } from './utils/getWeb3';\nimport { Grid, Segment, Loader, Divider } from 'semantic-ui-react';\nimport './App.css';\nimport AppHeader from 'components/AppHeader';\nimport { RegisterVoters } from 'components/RegisterVoters';\nimport { PhaseLogs } from 'components/PhaseLogs';\nimport Title from 'components/Title';\nimport AdminPanel from 'components/AdminPanel';\nimport RegisterProposal from 'components/RegisterProposal';\nimport Voting from 'components/Voting';\nimport Winner from 'components/Winner';\n\nenum WorkflowStatus {\n  RegisteringVoters,\n  ProposalsRegistrationStarted,\n  ProposalsRegistrationEnded,\n  VotingSessionStarted,\n  VotingSessionEnded,\n  VotesTallied\n}\n\ninterface Proposal {\n  name: string;\n  votes: number;\n  id: number;\n}\n\nconst App = () => {\n  const [state, setState] = useState<any>({\n    web3: null,\n    accounts: null,\n    contract: null,\n    owner: null,\n    events: [],\n    selectedAccount: null\n  });\n  const [workflowStatus, setWorkflowStatus] = useState(WorkflowStatus.RegisteringVoters);\n  const [voters, setVoters] = useState<string[]>([]);\n  const [proposals, setProposals] = useState<Proposal[]>([]);\n  const [winner, setWinner] = useState({ name: '', votes: 0 });\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const init = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3: any = await getWeb3();\n      console.log('web3', web3);\n      console.log('VotingContract', VotingContract);\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(VotingContract.abi, deployedNetwork && deployedNetwork.address);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      setState({ ...state, web3, accounts, contract: instance });\n\n      instance.events.allEvents(\n        {\n          fromBlock: 0\n        },\n        (error, event) => {\n          if (error) throw new Error(error);\n          handleEvents(event);\n        }\n      );\n\n      await setAccountChangeListener(handleChangeAccount);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  const handleChangeAccount = (account) => {\n    if (account) {\n      setState((prevState) => ({ ...prevState, selectedAccount: account.toLowerCase() }));\n    }\n  };\n\n  const handleEvents = (event) => {\n    if (event) {\n      console.log('event', event.event, event);\n    }\n    if (event.event === 'OwnershipTransferred') {\n      setState((prevState) => ({\n        ...prevState,\n        owner: event.returnValues.newOwner?.toLowerCase(),\n        events: [...prevState.events, event]\n      }));\n    }\n    if (event.event === 'WorkflowStatusChange') {\n      setWorkflowStatus(Number(event.returnValues.newStatus));\n    }\n    if (event.event === 'VoterRegistered') {\n      const newVoter = event.returnValues.voterAddress;\n      setVoters((prevState) => [...prevState, newVoter.toLowerCase()]);\n    }\n    if (event.event === 'Voted') {\n      const proposalId = event.returnValues.proposalId;\n      setProposals((prevProposals) =>\n        prevProposals.map((p) => (p?.id === Number(proposalId) ? { ...p, votes: p.votes + 1 } : p))\n      );\n    }\n    if (event.event === 'Winner') {\n      const name = event.returnValues.name;\n      const votes = event.returnValues.votes;\n      setWinner((prevState) => ({ ...prevState, name, votes }));\n    }\n  };\n\n  const handleChangeStatus = async () => {\n    const { contract } = state;\n    await contract?.methods?.changeStatus().send({ from: state.owner });\n  };\n\n  const handleVoterSubmit = async (voter: string) => {\n    if (voter) {\n      await state.contract.methods.registerVoter(voter).send({ from: state.owner });\n    }\n  };\n\n  const handleProposalSubmit = async (proposal: string) => {\n    if (proposal) {\n      const response = await state.contract.methods.addProposal(proposal).send({ from: state.selectedAccount });\n      if (response.events.ProposalRegistered.event === 'ProposalRegistered') {\n        const id = response.events.ProposalRegistered.returnValues.proposalId;\n        const newProposal: Proposal = { id: Number(id), name: proposal, votes: 0 };\n        setProposals((prevState) => [...prevState, newProposal]);\n      }\n    }\n  };\n\n  const handleVote = async (id: number) => {\n    await state.contract?.methods?.vote(id).send({ from: state.selectedAccount });\n  };\n\n  const handleTallingVotes = async () => {\n    await state.contract?.methods?.tallingVotes().send({ from: state.selectedAccount });\n  };\n\n  const handleGetWinner = async () => {\n    await state.contract?.methods?.getWinner().send({ from: state.selectedAccount });\n  };\n\n  const loadPhaseComponents = () => {\n    switch (workflowStatus) {\n      case WorkflowStatus.RegisteringVoters:\n        if (state.selectedAccount === state.owner) {\n          return <RegisterVoters onVoterSubmit={handleVoterSubmit} />;\n        }\n        return null;\n      case WorkflowStatus.ProposalsRegistrationStarted:\n        return <RegisterProposal onSubmitProposal={handleProposalSubmit} />;\n      case WorkflowStatus.VotingSessionStarted:\n        return <Voting proposals={proposals} onVote={handleVote} />;\n      case WorkflowStatus.VotingSessionEnded:\n        return <h3>Talling votes ...</h3>;\n      case WorkflowStatus.VotesTallied:\n        if (winner && winner.votes) {\n          return <Winner name={winner.name} votes={winner.votes} />;\n        }\n        return <h3>Waiting for the winner ...</h3>;\n      default:\n        return <div>Nothing to show</div>;\n    }\n  };\n\n  if (!state.web3) {\n    return <Loader active size='huge' />;\n  }\n  return (\n    <div className='App'>\n      <AppHeader address={state.selectedAccount} />\n      <Title phase={workflowStatus} />\n      <Segment placeholder style={{ height: '500px' }}>\n        <Grid columns={2} relaxed='very' stackable>\n          <Grid.Column style={{ display: 'flex', justifyContent: 'center' }}>\n            {loadPhaseComponents() || <h4>No access to this phase</h4>}\n          </Grid.Column>\n          {state.selectedAccount === state.owner && (\n            <AdminPanel\n              onGetWinner={handleGetWinner}\n              onChangePhase={handleChangeStatus}\n              onTallingVotes={handleTallingVotes}\n              status={workflowStatus}\n            />\n          )}\n        </Grid>\n        <Divider vertical></Divider>\n      </Segment>\n      <PhaseLogs voters={voters} proposals={proposals} />\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useState } from 'react';\nimport { Button, Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  onSubmitProposal: (proposal: string) => void;\n}\n\nconst RegisterProposal = ({ onSubmitProposal }: Props) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = ({ target: { value } }) => setValue(value);\n  const handleSubmit = () => {\n    onSubmitProposal(value);\n    setValue('');\n  };\n\n  return (\n    <Form style={{ display: 'flex', alignItems: 'start' }}>\n      <Form.Field>\n        <input type='text' placeholder='Proposal' value={value} onChange={handleChange} />\n        {!value && (\n          <Label basic color='red' pointing>\n            Write a proposal\n          </Label>\n        )}\n      </Form.Field>\n\n      <Button primary onClick={handleSubmit}>\n        Register proposal\n      </Button>\n    </Form>\n  );\n};\n\nexport default RegisterProposal;\n","import React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\n\ninterface Proposal {\n  name: string;\n  votes: number;\n  id: number;\n}\n\ninterface Props {\n  proposals: Proposal[];\n  onVote: (id: number) => void;\n}\n\nconst Voting = ({ proposals, onVote }: Props) => {\n  return (\n    <div>\n      <h3>Proposal list</h3>\n      <Table singleLine>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>ID</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Vote number</Table.HeaderCell>\n            <Table.HeaderCell>Vote action</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {proposals.map((p) => (\n            <Table.Row key={p.id}>\n              <Table.Cell>{p.id}</Table.Cell>\n              <Table.Cell>{p.name}</Table.Cell>\n              <Table.Cell>{p.votes}</Table.Cell>\n              <Table.Cell>\n                <Button circular color='linkedin' icon='paper plane' onClick={() => onVote(p.id)} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nexport default Voting;\n","import React from 'react';\nimport { Card, Icon, Image } from 'semantic-ui-react';\n\ninterface Props {\n  name: string;\n  votes: number;\n}\n\nconst imgStyles = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  height: '320px',\n  justifyContent: 'center',\n  width: '300px',\n  padding: '10px'\n};\n\nconst Winner = ({ name, votes }: Props) => (\n  <Card style={imgStyles}>\n    <Image size='small' src='https://react.semantic-ui.com/images/avatar/large/elliot.jpg' wrapped />\n    <Card.Content>\n      <Card.Header>{name}</Card.Header>\n      <Card.Description>\n        {`${name} is a sound engineer living in Paris who enjoys playing guitar and hanging with his cat.`}\n      </Card.Description>\n    </Card.Content>\n    <Card.Content extra>\n      <a>\n        <Icon name='user' />\n        {votes} votes\n      </a>\n    </Card.Content>\n  </Card>\n);\n\nexport default Winner;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}